import React, { useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableSortLabel,\n  Paper,\n  Checkbox,\n  IconButton,\n  Chip,\n  Box,\n  Typography,\n  Skeleton,\n  Alert\n} from '@mui/material';\nimport {\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Visibility as ViewIcon,\n  MoreVert as MoreVertIcon\n} from '@mui/icons-material';\n\nconst DataTable = ({\n  title,\n  columns = [],\n  data = [],\n  loading = false,\n  error = null,\n  totalCount = 0,\n  page = 0,\n  rowsPerPage = 10,\n  onPageChange,\n  onRowsPerPageChange,\n  onSort,\n  orderBy = '',\n  order = 'asc',\n  selectable = false,\n  selected = [],\n  onSelectAll,\n  onSelectOne,\n  actions = [],\n  onRowClick,\n  emptyMessage = 'No data available'\n}) => {\n  const [hoveredRow, setHoveredRow] = useState(null);\n\n  // Handle sort\n  const handleSort = (property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    onSort && onSort(property, isAsc ? 'desc' : 'asc');\n  };\n\n  // Handle select all\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = data.map((n) => n.id);\n      onSelectAll && onSelectAll(newSelecteds);\n    } else {\n      onSelectAll && onSelectAll([]);\n    }\n  };\n\n  // Handle select one\n  const handleSelectOne = (event, id) => {\n    event.stopPropagation();\n    onSelectOne && onSelectOne(id);\n  };\n\n  // Check if row is selected\n  const isSelected = (id) => selected.indexOf(id) !== -1;\n\n  // Format cell value based on column type\n  const formatCellValue = (value, column) => {\n    if (value === null || value === undefined) {\n      return '-';\n    }\n\n    switch (column.type) {\n      case 'date':\n        return new Date(value).toLocaleDateString();\n      case 'datetime':\n        return new Date(value).toLocaleString();\n      case 'boolean':\n        return value ? 'Yes' : 'No';\n      case 'chip':\n        return (\n          <Chip \n            label={value} \n            size=\"small\" \n            color={column.chipColor?.(value) || 'default'}\n            variant={column.chipVariant || 'filled'}\n          />\n        );\n      case 'custom':\n        return column.render ? column.render(value, data.find(row => row[column.id] === value)) : value;\n      case 'number':\n        return typeof value === 'number' ? value.toLocaleString() : value;\n      case 'percentage':\n        return `${value}%`;\n      case 'currency':\n        return `$${value}`;\n      default:\n        return value;\n    }\n  };\n\n  // Render loading skeleton\n  const renderSkeleton = () => {\n    return Array.from({ length: rowsPerPage }).map((_, index) => (\n      <TableRow key={`skeleton-${index}`}>\n        {selectable && (\n          <TableCell padding=\"checkbox\">\n            <Skeleton variant=\"rectangular\" width={20} height={20} />\n          </TableCell>\n        )}\n        {columns.map((column) => (\n          <TableCell key={column.id}>\n            <Skeleton variant=\"text\" />\n          </TableCell>\n        ))}\n        {actions.length > 0 && (\n          <TableCell>\n            <Skeleton variant=\"circular\" width={24} height={24} />\n          </TableCell>\n        )}\n      </TableRow>\n    ));\n  };\n\n  // Render empty state\n  const renderEmpty = () => (\n    <TableRow>\n      <TableCell \n        colSpan={columns.length + (selectable ? 1 : 0) + (actions.length > 0 ? 1 : 0)} \n        align=\"center\"\n        sx={{ py: 4 }}\n      >\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {emptyMessage}\n        </Typography>\n      </TableCell>\n    </TableRow>\n  );\n\n  return (\n    <Paper sx={{ width: '100%', mb: 2 }}>\n      {title && (\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n        </Box>\n      )}\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ m: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <TableContainer>\n        <Table sx={{ minWidth: 750 }}>\n          <TableHead>\n            <TableRow>\n              {selectable && (\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    color=\"primary\"\n                    indeterminate={selected.length > 0 && selected.length < data.length}\n                    checked={data.length > 0 && selected.length === data.length}\n                    onChange={handleSelectAllClick}\n                  />\n                </TableCell>\n              )}\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align || 'left'}\n                  padding={column.disablePadding ? 'none' : 'normal'}\n                  sortDirection={orderBy === column.id ? order : false}\n                  sx={{ fontWeight: 'bold' }}\n                >\n                  {column.sortable ? (\n                    <TableSortLabel\n                      active={orderBy === column.id}\n                      direction={orderBy === column.id ? order : 'asc'}\n                      onClick={() => handleSort(column.id)}\n                    >\n                      {column.label}\n                    </TableSortLabel>\n                  ) : (\n                    column.label\n                  )}\n                </TableCell>\n              ))}\n              {actions.length > 0 && (\n                <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>\n                  Actions\n                </TableCell>\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {loading ? (\n              renderSkeleton()\n            ) : data.length === 0 ? (\n              renderEmpty()\n            ) : (\n              data.map((row, index) => {\n                const isItemSelected = isSelected(row.id);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    onClick={() => onRowClick && onRowClick(row)}\n                    role={selectable ? \"checkbox\" : undefined}\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ \n                      cursor: onRowClick ? 'pointer' : 'default',\n                      '&:hover': {\n                        backgroundColor: theme => theme.palette.action.hover,\n                      }\n                    }}\n                    onMouseEnter={() => setHoveredRow(row.id)}\n                    onMouseLeave={() => setHoveredRow(null)}\n                  >\n                    {selectable && (\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          onChange={(event) => handleSelectOne(event, row.id)}\n                          inputProps={{\n                            'aria-labelledby': labelId,\n                          }}\n                        />\n                      </TableCell>\n                    )}\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell\n                          key={column.id}\n                          align={column.align || 'left'}\n                          sx={{ \n                            maxWidth: column.maxWidth || 'auto',\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                            whiteSpace: column.wrap ? 'normal' : 'nowrap'\n                          }}\n                        >\n                          {formatCellValue(value, column)}\n                        </TableCell>\n                      );\n                    })}\n                    {actions.length > 0 && (\n                      <TableCell align=\"right\">\n                        <Box \n                          sx={{ \n                            display: 'flex', \n                            justifyContent: 'flex-end',\n                            opacity: hoveredRow === row.id ? 1 : 0.7,\n                            transition: 'opacity 0.2s'\n                          }}\n                        >\n                          {actions.map((action, actionIndex) => (\n                            <IconButton\n                              key={actionIndex}\n                              size=\"small\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                action.onClick(row);\n                              }}\n                              disabled={action.disabled?.(row)}\n                              title={action.title}\n                              sx={{ ml: 0.5 }}\n                            >\n                              {action.icon}\n                            </IconButton>\n                          ))}\n                        </Box>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                );\n              })\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      \n      {!loading && totalCount > 0 && (\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 50]}\n          component=\"div\"\n          count={totalCount}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={(event, newPage) => onPageChange && onPageChange(newPage)}\n          onRowsPerPageChange={(event) => onRowsPerPageChange && onRowsPerPageChange(parseInt(event.target.value, 10))}\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default DataTable;